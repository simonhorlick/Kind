// on_change handles an update to a source file by re-parsing and running the
// type checker. A list of diagnostics is returned so that the parse and
// typecheck errors can be displayed to the user.
Lsp.on_change(
  uri: String,
  content: String,
  defs: Kind.Defs
): Pair(Kind.Defs, List(Lsp.Diagnostic))
  // Parse the changes in this file.
  let parsed = Kind.Parser.file(uri, content, Map.new!, 0, content)

  case parsed {
    error:
      // If there's a parse error then immediately return that parse error.
      // There's no need to typecheck.
      let diagnostics = [Lsp.Diagnostic.new(
        parsed.err,
        Lsp.DiagnosticSeverity.Error,
        uri,
        Nat.to_u32(parsed.idx),
        Nat.to_u32(parsed.idx))]
      {defs, diagnostics}

    value:
      // Remove all of the defs that exist for the file `uri`. This is to
      // ensure that defs are removed properly when they are no longer in the
      // file.
      let existingDefs = Lsp.defs(defs, uri)

      let namesToDelete = List.map!!((x) open x; x.name, existingDefs)

      let otherDefs = List.for(_, namesToDelete, _, defs,
        (d,m) Map.delete!(Kind.Name.to_bits(d),m)
      )

      // Merge the parsed defs with all the existing defs. Note the order of
      // arguments here - in case of a collision union takes the value in the
      // first argument.
      let currentDefs = Map.union!(parsed.val, otherDefs)

      let defsToCheck = List.mapped!(
        Map.keys!(parsed.val), _, Kind.Name.from_bits)

      //let _ = Debug.log!("to check: " | String.join(", ", defsToCheck), (x) Unit.new);

      // Find any terms that reference the changed terms. If a term references
      // something that the user has just edited then we need to re-check it.
      // We also need to check if anything references a definition that the
      // user has just removed as part of this edit.
      let affectedNames = GSet.from_list!(
        String.cmp, List.concat!(namesToDelete, defsToCheck))
      let rdepTerms = List.filter!(
        Lsp.contains_ref(affectedNames),
        Map.values!(otherDefs))
      let rdeps = List.map!!((x) open x; x.name, rdepTerms);

      //let _ = Debug.log!("rdeps: " | String.join(", ", rdeps), (x) Unit.new);

      let checkNames = List.concat!(defsToCheck, rdeps)
      let checked = IO.purify!(
        Kind.Synth.many(
          checkNames,
          Lsp.mark_as_init(rdeps, currentDefs)
        )
      );

      {checked, Lsp.diagnostics(checked)}
  }

Lsp.mark_as_init(names: List(Kind.Name), defs: Kind.Defs): Kind.Defs
  case names {
    nil : defs,
    cons:
      // Look up the name.
      case Kind.get<Kind.Def>(names.head, defs) as got {
        none: Lsp.mark_as_init(names.tail, defs),
        some:
          open got.value as d
          // Set the status to `init`.
          let defs = Kind.set!(
            d.name,
            Kind.Def.new(
              d.file,
              d.code,
              d.orig,
              d.name,
              d.term,
              d.type,
              d.isct,
              d.arit,
              Kind.Status.init),
            defs)
          Lsp.mark_as_init(names.tail, defs)
      }
  }

// Check if this definition contains any references to any of the names in
// `names`.
Lsp.contains_ref(names: GSet(String), p: Kind.Def): Bool
  List.any!(
    (ref)
      open ref
      GSet.member!(String.cmp, ref.name, names),
    Lsp.refs(p))