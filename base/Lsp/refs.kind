type Lsp.Ref {
  new(
    // The source range.
    range: Pair(Nat, Nat),

    // The definition this term references.
    name: String,
  )
}

Lsp.refs.go(term: Kind.Term, start: Nat, end: Nat)
  : List(Lsp.Ref)
  // Traverse the tree of Kind.Terms and collect any refs. If we come across
  // a Kind.Term.orig then we use that for the direct child.
  case term {
    ref: [
      Lsp.Ref.new(Pair.new!!(start, end), Kind.Name.show(term.name))
    ]

    all:
      let type = Lsp.refs.go(term.xtyp, 0, 0)
      let body = Lsp.refs.go(
        term.body(
          Kind.Term.var(term.self, 0),
          Kind.Term.var(term.name, 0)
        ), 0, 0)
      List.concat!(type, body)

    lam: Lsp.refs.go(term.body(Kind.Term.var(term.name, 0)), 0, 0)

    app:
        let func = Lsp.refs.go(term.func, 0, 0)
        let argm = Lsp.refs.go(term.argm, 0, 0)
        List.concat!(func, argm)

    let:
      let expr = Lsp.refs.go(term.expr, 0, 0)
      let body = Lsp.refs.go(
        term.body(Kind.Term.var(term.name, 0)),
        0, 0)
      List.concat!(expr, body)

    def:
      let expr = Lsp.refs.go(term.expr, 0, 0)
      let body = Lsp.refs.go(
        term.body(Kind.Term.var(term.name, 0)),
        0, 0)
      List.concat!(expr, body)

    ann:
      let term = Lsp.refs.go(term.term, 0, 0)
      let type = Lsp.refs.go(term.type, 0, 0)
      List.concat!(term, type)

    cse:
      let wyth = List.flatten!(List.mapped!(term.with)!((defn)
        case defn {
          new:
            let term = Lsp.refs.go(defn.term, 0, 0)
            case defn.type {
              none: term,
              some:
                open defn.type;
                let type = Lsp.refs.go(defn.type.value, 0, 0)
                List.concat!(term, type)
            }
        }))

      let cses = BitsMap.to_list!(term.cses);
      let cses = List.flatten!(List.mapped!(cses)!(
        (x)
          Lsp.refs.go(Pair.snd!!(x), 0, 0)
      ));

      let moti = case term.moti {
        none: [],
        some: Lsp.refs.go(term.moti.value, 0, 0),
      };

      let expr = Lsp.refs.go(term.expr, 0, 0)
      List.concat!(wyth, List.concat!(cses, List.concat!(moti, expr)))

    ori:
      Lsp.refs.go(
        term.expr,
        Pair.fst!!(term.orig),
        Pair.snd!!(term.orig))

  } default []

// refs lists all of the names that the given Def references along with the
// source location of the name.
Lsp.refs(d: Kind.Def): List(Lsp.Ref)
  open d
  List.concat!(
    Lsp.refs.go(d.term, 0, 0),
    Lsp.refs.go(d.type, 0, 0),
  )